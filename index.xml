<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>joker的博客</title>
    <link>http://jokerguo.top/</link>
    <description>Recent content on joker的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 04 Dec 2019 16:53:41 +0800</lastBuildDate>
    
	<atom:link href="http://jokerguo.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS函数的执行时机</title>
      <link>http://jokerguo.top/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Wed, 04 Dec 2019 16:53:41 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description> JS函数的调用时机不同，得到的结果也是不同的 setTimeout()方法用于在指定的毫秒后调用函数或者计算表达式，其含义就是尽快执行，而不是马上执行 为什么打印的是6个6 let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } //输出 6,6,6,6,6,6  解释: 浏览器在执行到setTimeout时，不会直接去执行setTimeout里面的函数，而是继续执行for循环，将里面的函数放在一边。直到循环结束，才会去执行setTimeout里面的函数，而此时i的值等于6（for循环的原因）。所有最后打印i的值6次都是6
如何输出 0,1,2,3,4,5 for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) }  解释 每次执行for循环，都会复制一个新的i ,打印的每一次i都不是同一个i
其他方法 let i for (i=0; i&amp;lt;6; i++) { (function(j){ setTimeout(()=&amp;gt;{ console.log( j ); }, 0 ); })(i); }  </description>
    </item>
    
    <item>
      <title>JS对象的基本用法</title>
      <link>http://jokerguo.top/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 28 Nov 2019 14:52:21 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>如何声明一个对象 简单写法
let obj = {name:&#39;guo&#39;,age:21,gender:&#39;man&#39;}  正规写法
let obj = new Object({name:&#39;guo&#39;,age:21,gender:&#39;man&#39;})  提示： 属性名（键名）是字符串，不是标识符
如何删除对象的属性 delete操作符 delete obj.xxx delete obj[&#39;xxx&#39;]  in操作符 &#39;xxx&#39; in obj ===false //判断属性在不在对象中  提示： 1. 给属性赋值undefined，只是删除了属性值
如何查看对象的属性 查看自身所有属性 Object.keys(obj) //查看所有属性名 Object.values(obj) //查看所有属性值 Object.entries(obj) //查看所有属性名和属性值  可查看自身和共有属性 console.dir(obj)  判断是自身还是共有属性 obj.hasOwnProperty(&#39;属性名&#39;)  查看对象的个别属性 obj[&#39;key&#39;] obj.key  提示： key是字符串！！！
修改和增加对象属性 直接赋值 let obj = {name : &#39;guo&#39;} obj.name = &#39;guo&#39; obj[&#39;name&#39;] = &#39;name&#39;  批量赋值 Object.</description>
    </item>
    
    <item>
      <title>JS的数据类型</title>
      <link>http://jokerguo.top/posts/js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 27 Nov 2019 16:28:31 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>JS中的数据类型分别是：  number string null undefined symbol bool object  number 写法  整数写法
1
 小数写法
0.1
 科学计数法
1.23e4
 八进制写法(0/00/0o)
0123或00123或0o123
 十六进制写法（0x/0X）
0x3F或0X3F
 二进制写法（0b/0B）
ob11或0B11
  特殊值  正0和负0（都等于0） 无穷（infinity / +infinity / -infinity） NaN (Not a Number)  JS数字使用64位浮点数进行存储
string 转义字符 空字符串和空格字符串是不同的
读取字符  string[index]
let s = &#39;hello&#39; s[0] //&#39;h&#39;  index从0开始
s[0] 是第一个字符  index的length
let s = &#39;hello&#39; s[5] //undefined 不会报错 s[4] // &#39;o&#39;   bool  否定运算</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>http://jokerguo.top/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 26 Nov 2019 16:09:09 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>语句与表达式 var a = 1 + 3  1 + 3叫做表达式，指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。
标识符的规则 JavaScript 语言的标识符对大小写敏感，所以a和A是两个不同的标识符。
 第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）和中文。 第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字0-9。  if else 语法 if(表达式){ //表达式为真执行 }else{ //表达式为假执行 }  注意：使用（===）运算符
可替代if else的方法  问好冒号表达式（三元运算符）
表达式 ？ 表达式1 ： 表达式2
 &amp;amp;&amp;amp;
A &amp;amp;&amp;amp; B &amp;amp;&amp;amp; C &amp;amp;&amp;amp; D
取第一个假值或者D
 ||
A || B || C || D
取第一个真值或者D
  while for循环语句 循环语句用于重复执行某个操作。
while循环 while(表达式){语句}   判断表达式的真假 为真执行语句。执行完后再判断真假，在执行 当表达式为假时，执行while语句后面的代码  do while循环 do{ 语句 } while(表达式)   先执行语句 再判断表达式真假，为真时执行语句。执行完后再判断真假，在执行 当表达式为假时，执行while语句后面的代码  for循环 for(语句1,表达式,语句2){ 循环体 }   先执行语句1 判断表达式，为真时执行循环体，再执行语句2 为假时，跳出循环，执行后面的语句  break和continue break语句用于跳出代码块或循环</description>
    </item>
    
    <item>
      <title>JavaScript的诞生</title>
      <link>http://jokerguo.top/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Thu, 21 Nov 2019 16:57:14 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScript（通常缩写为JS）是一种高级的、解释型的编程语言。JavaScript是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它已经由ECMA（欧洲电脑制造商协会）通过ECMAScript实现语言的标准化。它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持。
javascript的诞生背景  1994年，在互联网刚兴起的时代，网景公司（Netscape）发布了Navigator浏览器0.9版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。因此网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。
 网页脚本语言到底是什么语言？网景公司当时有两个选择：一个是采用现有的语言，比如Perl、Python、Tcl、Scheme等等，允许它们直接嵌入网页；另一个是发明一种全新的语言。这两个选择各有利弊。第一个选择，有利于充分利用现有代码和程序员资源，推广起来比较容易；第二个选择，有利于开发出完全适用的语言，实现起来比较容易。
 1995年，Sun公司将Oak语言更名为Java并推向市场，并宣称“Write Once, Run Anywhere”。网景公司深受Java的影响，网景公司高层都非常信赖Java，所以网景公司决定要蹭Java的流量，新开发一门语言，用于浏览器的交互。
javascript的诞生 1995年4月，Brendan Eich（布兰登·艾奇） 加入网景公司。Brendan原本研究方向是函数式编程与Scheme语言。但是1995年5月，网景公司指定Brendan成为了“新语言”的设计师。并且要求这个“新语言”要和Java足够的相似（面向对象思想），但是要比Java能够更加简单地上手。
 Brendan志不在此，而且对Java完全不感兴趣，为了完成任务他花了10天时间便把这门“新语言”的最初版本设计了出来。总的来说他的设计思路是这样的：
 借鉴C语言的基本语法； 借鉴Java语言的数据类型和内存管理； 借鉴Scheme语言，将函数提升到&amp;rdquo;第一等公民&amp;rdquo;（first class）的地位； 借鉴Self语言，使用基于原型（prototype）的继承机制。  所以，Javascript语言实际上是两种语言风格的混合产物——（简化的）函数式编程+（简化的）面向对象编程。
javascript的缺陷 阮一峰&amp;ndash;Javascript的10个设计缺陷
ECMAScript  1997年6月，第一版ECMAScript发布。
 1999年12月，第三版ECMAScript发布，这也是应用最广泛的ECMAScript版本。
 第四版流产。
 第三版发布后，经过了10年，20019年12月第五版ECMAScript才发布，这正是因为这段时间IE浏览器正制霸着市场。
 随着Chrome的崛起，这些新的浏览器的JS引擎都根据ECMAScript标准进行实现。所以除了IE，其他浏览器与浏览器之间的兼容性得到大大提高。
 2015年6月，ECMAScript第六版（ES6）发布。并在之后每一年都发布一版。可见JS地位在不断提高。
 JavaScript与ECMAScript的区别在于，ECMAScript是标准，JavaScript是实现（实际上JavaScript是由ECMAScript，DOM和BOM三者组成的），实现的功能不一定会出现在标准里面，不同的浏览器也有自己独特的JS实现。
JavaScript的发展 兴起&amp;ndash;Gmail  2004年愚人节，谷歌发布Gmail。Gmail是谷歌开发的一款具有发送接收邮件功能的在线网页。在Gmail出现以前，所有人都认为浏览器只能用 于浏览阅读。但是Gmail让用户重新认识了浏览器的功能。
 2005年，Jesse将谷歌实现Gmail的技术命名为AJAX。从此前端技术正式出现。
 2006年，JQuery发布，JQuery是最长寿的JS库，其主要是兼容IE，但随着IE的落寞，JQuery也逐渐淡出前端开发者的视野。
爆发&amp;ndash;V8引擎  Chrome的JS引擎是V8（V1~V7是不同语言的引擎），V8引擎超快的速度让chrome成为了最主流的浏览器。
 2009年，Ryan基于V8，创建了Node.js；2010年Issac基于Node.js写出了npm。有了node.js，前端工程师实现了在浏览器之外执行JS。
 2010年，TJ受Sinatra的启发，发布了Express.js。Node.js与Express.js让前端工程师可以完成后端的内容。虽然还比不上Java，但是 至少也具备了手段。
 借助Chrome的风，期间也爆发除了很多前端的技术：gulp、grunt、yeoman、require.js、webpack、Angular、React、Vue等。当然其中一些技术也已经过时了。</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://jokerguo.top/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Mon, 18 Nov 2019 21:01:13 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>URL 的组成  协议： http(80) / https(443) 域名或 ip：域名对应一个 ip 的字符串 ip 对应一个设备 最大值 255 端口号：一个服务对应一个端口号 （最大 6 万多） 路径：一串字符串 判断访问什么网页 查询参数：查看网页中的什么内容 锚点 ： 文档内部的定位 （锚点不会传入服务器）  DNS 的作用 DNS 服务的作用是将域名解析为 IP 地址 DNS 是域名系统 (Domain Name System) 的缩写，是因特网的一项核心服务，它作为可以将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。这是 DNS 的官方说法。
在互联网中通过 IP 地址来进行通信。但是 IP 地址的表示形式是数字，很难进行记忆（比如 116.213.120.232），所以为每个 IP 取一个人类更易记忆的域名形式（比如 www.google.com），而通过 DNS 来把解析域名成为 IP（将方便人理解的命名格式解析成计算机能够理解的格式，也可以将 IP 翻译成域名）
DNS 过程
 客户端向 DNS 服务器（DNS 服务器有自己的 IP 地址）发送域名查询请求 DNS 服务器告知客户机 Web 服务器的 IP 地址  nslookup命令 nslookup 命令用于查询 DNS 的记录，查看域名解析是否正常</description>
    </item>
    
    <item>
      <title>Css总结</title>
      <link>http://jokerguo.top/posts/css%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 17 Nov 2019 16:03:53 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/css%E6%80%BB%E7%BB%93/</guid>
      <description>一、css 简介 CSS，全拼 Cascading Style Sheets，层叠样式表，是由 Tim Berners Lee 的同事赖先生（Håkon Wium Lie）首先提出的，目前使用最广泛的版本为 CSS2.1。最新版本为 css3.0
二、css 语法 三、文档流 inline 行内元素中不能嵌入块级元素
行内元素不能设置宽度
行内元素的高度由 line-height 间接决定(如果内容字体不一致 可能行高会有所改变)
block 块级元素可以设置 width 默认宽度为 auto 不是 100%
块级元素中可以嵌入行内或者块级元素
inline-block 行内块元素结合两者 可使用 width
Tips: HTML5 中没有行内元素 块级元素的区分 所有元素指定 display suggest: 不要使用 width:100% 四、脱离文档流 position: absolute 绝对定位 / fixed 固定定位
float 浮动
五、overflow  auto 是灵活设置，超出时有滚动条，不超出时没有 scroll 一直显示滚动条 hidden 直接隐藏溢出部分 visible 直接显示溢出部分  六、盒模型 css 盒模型分两种 一种 content-box 一种 border-box</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://jokerguo.top/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Fri, 08 Nov 2019 16:17:02 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>《HTML 常用标签》 a 标签 href &amp;nbsp;&amp;nbsp; 超链接 填入相应的链接地址 1.&amp;nbsp;&amp;nbsp;网址 &amp;nbsp;&amp;nbsp; 推荐使用这种格式（//google.com）因为会自动选择协议，跳转到正确页面，减少 bug。
2.&amp;nbsp;&amp;nbsp;绝对路径于相对路径
注:在哪里开启的 http 服务 哪里就是根目录
3.&amp;nbsp;&amp;nbsp;伪协议
javascript:代码; &amp;nbsp;&amp;nbsp; （可实现无任何操作的 a 标签 不加代码）
mailto:&amp;nbsp;&amp;nbsp;发邮件
tel:&amp;nbsp;&amp;nbsp;打电话
4.&amp;nbsp;&amp;nbsp;#id&amp;nbsp;&amp;nbsp; 定位到页面中的 id 位置
target  _blank &amp;nbsp;&amp;nbsp; 新建窗口打开 _top &amp;nbsp;&amp;nbsp; 级别最高的窗口打开 _parent &amp;nbsp;&amp;nbsp; 父级窗口打开 _self &amp;nbsp;&amp;nbsp; 默认值 &amp;nbsp;&amp;nbsp; 当前窗口打开 target=&amp;ldquo;xxx&amp;rdquo; 创建一个 xxx 窗口 会覆盖之前的窗口 iframe name=&amp;ldquo;xxx&amp;rdquo; 用 name 为 xxx 的 iframe 窗口打开  download 下载页面&amp;nbsp;&amp;nbsp;部分浏览器不支持
rel=noopener 现在还不清楚具体用处
总结 a 标签的作用：跳转外部页面，内部锚点，邮箱和电话
MDN a 标签</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>http://jokerguo.top/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Fri, 08 Nov 2019 09:49:08 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description> HTML入门笔记1 HTML是谁发明的 1991年由Tim Berners-Lee提出
HTML的起手式 !  注：!会自动补齐代码
常用的表章节标签  h1-h6 标题 section 章节 article 文章 p 段落 header 头部 footer 脚部 main 主要内容 aside 旁支内容 div 划分  全局属性  class 定义一个类 contenteditable 内容可修改 hidden 不可见
 id 尽量不使用id style 样式 tabindex 使用Tab键选中 -1（不选中） 0（最后一个选中） 正数（按大小选中 ） title 标题  常用内容标签  ol+li 有序列表 ul+li 无序列表 dl+dt+dd 自定义列表 pre code 通常一起使用 中间代码 hr 水平线 br 换行 a 超链接 em 语气强调 strong 内容重要 quote 表示内联引用 blockquote 表示块级引用 cite属性值：url  </description>
    </item>
    
    <item>
      <title>如何搭建博客</title>
      <link>http://jokerguo.top/posts/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 07 Nov 2019 14:42:00 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>使用 hugo 搭建一个个人博客 首先进入 Hugo 官网按提示操作
第一步 安装 Hugo
第二步 执行该命令行
hugo new site jokerguo.github.io-creator  第三步 执行下列命令行
git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  第四步 新建一篇博客
hugo new posts/开通博客啦.md  注意点: 将博客中 draft 的值修改为 false
第五步 hugo server -D  第六步 找到配置文件 config.toml
 将语言修改为&amp;rdquo;zh-Hans&amp;rdquo; 标题改为自己的博客名 主题看个人喜好更改  第七步 hugo -D  最终会生成 public 文件
 creator 目录下添加.gitignore 文件 写入/public/ 进入 public 创建本地仓库 在 GitHub 上创建 repo 仓库名：自己用户名.</description>
    </item>
    
    <item>
      <title>我的第一篇博客</title>
      <link>http://jokerguo.top/posts/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 07 Nov 2019 14:22:01 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>下面是我的女朋友</description>
    </item>
    
    <item>
      <title>开通博客</title>
      <link>http://jokerguo.top/posts/%E5%BC%80%E9%80%9A%E5%8D%9A%E5%AE%A2%E5%95%A6/</link>
      <pubDate>Tue, 05 Nov 2019 17:17:13 +0800</pubDate>
      
      <guid>http://jokerguo.top/posts/%E5%BC%80%E9%80%9A%E5%8D%9A%E5%AE%A2%E5%95%A6/</guid>
      <description>开通啦 这是一条公告 哈哈哈</description>
    </item>
    
  </channel>
</rss>